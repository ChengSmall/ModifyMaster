{
  /*
  修改器配置文件格式
  使用json语法为基础，定义修改器要修改的游戏，程序；内存地址，值类型，修改方式，热键等
  */

  "information": {
    //这里是基础的显示信息
    "name": "修改器对应的程序名",
    "author": "作者名或其它能代表作者的称呼",
    "synopsis": "修改器概要和简略介绍，使用\n换行"
  },

  "data": {
    //这里是数据区域

    "datas": {
      //这里是修改器要修改的数据基址集合
      //使用键值对将每一个基址对应一个唯一字符串ID，用于之后修改器做修改时的引用
      //值有不同种类
      "data1": 883621, //类型1：直接使用一个十进制整数表示一个地址值

      "data2": "FA1B0C", //类型2：使用字符串模式的一个十六进制整数作为地址值

      "data3": {
        //此处填写表示基址的模块名（字符串类型），或者填写表示地址的十进制整数或十六进制数的字符串格式
        "baseAddress": "process.exe",

        "offset": 1234, //此处填写从 module 参数要添加的偏移，如果没有此参数或是0则表示0偏移；该参数可选，可以写十进制整数或十六进制整数的字符串
        "addresses": [
          //此处填写从基址开始的多及指针解引用偏移；十进制整数或十六进制整数的字符串
          4,
          0,
          200,
          "FF" //同样可以用十六进制值的字符串

          /*
          关于addresses参数的偏移
          先将baseAddress加上偏移值，将该值当作地址搜索内存位置，记为 void* p
          如果该参数为空，则直接将 p 当作最终搜寻到的地址

          若该参数存在，则继续进行操作，以下是伪代码:
          list = 该参数所指的数组;
          int length = 该数组元素数量;
          byte* ptr = p的值;
          for(int i = 0; i < length; i++)
          {
              ptr = (*ptr) + list[i];
          }

          最后将得到的 p 当作最终地址来搜索内存位置
          */
        ]
      },

      "data4": {
        "baseAddress": {
          //关于基址的模块名，如果进程加载了多个同名模块，只能选取其中一个
          "name": "模块名",

          //count参数表示为同名模块的序列id，从0开始计数，如果有3个同名模块就是 0,1,2；
          //排序按照模块地址排序从小到大排
          "count": 0

        }
      }

    },

    "modifier": {
      //这里是修改器的修改条目，每一个条目是一个修改对象

      "修改条目1": {
        //修改条目格式如下

        "address": { //必填
          "id": "地址ID", //要修改的地址ID，id表示 datas 参数中的key
          "type": "fixed" //该参数决定此条目对地址所在数据的修改方式
          /*
          type可填如下参数：
          "fixed" => 表示将其地址的值固定为value参数，使用双击或热键控制开关
          "fixedUp" => 表示不让其地址的值小于value，使用双击或热键控制开关
          "fixedDown" => 表示不让其地址的值大于value，使用双击或热键控制开关
          "once" => 表示每修改一次都会将值设置为value，使用双击或热键修改一次
          "add" => 表示每修改一次在值的基础上添加value，使用双击或热键修改一次
          "sub" => 表示每修改一次在值的基础上减少value，使用双击或热键修改一次
          "fixedSelf" => 表示在打开开关的一刻，将值固定为当前值（忽略value参数）
          对于fixedSelf类型的修改时机，是在开关被打开且条件满足后才会将值锁定
          但是即便条件为满足，也会在打开开关的那一刻记录当前值，在关闭开关之前会一直锁定参数为记录的值
          */
        },

        "dataType": "int32", //必填
        /*
        dataType填写地址所在的值类型
        该参数决定要修改的数据的类型和字节长度
        dataType可填以下参数：
        int32 => 表示4字节整形
        uint32 => 表示4字节无符号整形
        int64 => 表示8字节整形
        float => 表示单精度浮点型（4个字节）
        double => 表示双精度浮点型（8个字节）
        int16 => 表示2字节整形
        uint16 => 表示2字节无符号整形
        byte => 表示单个字节的整数
        */

        //要修改的值，采用 [值获取结构和修改器扩展] 获取值
        //该项在 address 项的 type 参数是 "fixedSelf" 时被忽略，其它情况必填
        "value": 100,

        "UI": {
          //可选
          //条目的UI配置，若没有这项参数则使用条目的key作为条目名称
          "text": "条目名称",
          //promptWindow项可选，不写则没有
          "promptWindow": "条目提示的悬浮窗口文本"
        },

        //启用条件，可选
        "condition": {
          //条件的优先级小于控制开关，当修改条目处于开启状态或每启用一次修改后，修改器会在每次修改内存前判断条件，若条件成立则修改，不成立则不做修改；不需要条件可忽略参数或设为null

          "type": "eq",
          /*
          type参数填写条件判断的类型，可填写以下参数:
          "eq": 判断 x = y
          "noteq": 判断 x ≠ y
          "greater": 判断 x > y
          "less": 判断 x < y
          "greq": 判断 x >= y
          "lesseq": 判断 x <= y
          x和y采用 [值获取结构和修改器扩展] 获取值
          */

          "x": 0,
          "y": 0

          /*
          type参数除此之外，还有几项参数可以进行多项条件判断
          此时，x和y不再是 [值获取结构和修改器扩展] ，而是 condition 参数，可以多层嵌套
          以下是可用参数和作用:
          "and": x 和 y 条件结果全部是 true 结果是 true，否则是false
          "or": x 和 y 任意一个条件是 true 结果是 true，全部是false结果是false
          "xor": x 和 y 的条件结果不相同时结果是true，否则是false
          "nxor": x 和 y 的条件结果相同时结果是true，否则是false
          "neg": 忽略y参数，将x的结果取反（此时可以不写y参数）
          */
        },


        //可选项，此修改条目热键，不需要热键可忽略此参数；可使用["热键1","热键2"]添加多个热键组合
        "hotkeys": "[热键编号]",


        //此项表示在打开配置文件后该条目是否默认处于开启状态
        "defaultToggle": true
      },

      "修改条目2": {
        //仅有必填项的示例

        "address": {
          "id": "HP",
          "type": "fixed"
        },

        "dataType": "int32",

        "value": {
          "type": "address",
          "dataType": "int32",
          "id": "MaxHP"
        }
      },

      "修改条目3": {
        //仅有必填项的示例2

        "address": {
          "id": "MP",
          "type": "fixedSelf"
        },

        "dataType": "float"
      }

    }

  },

  "process": {
    /*
    这里是进程参数，用于指示修改器打开后检测进程
    如果不存在该条目，则不会自动打开进程，需要手动打开进程
    如果在打开一个配置文件之前，修改器已经选择了进程，则在打开项目文件后，修改器会覆盖配置文件中设置的进程
    */
    "moduleName": "进程名",

    //如果操作系统有同名进程，则需要填写count代表打开的进程位置；从0开始计数，按照进程唯一ID排序，如果不写count项默认选择第一个进程
    "count": 0

  }

}